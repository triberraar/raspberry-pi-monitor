{"name":"Triberraar-pi-monitor","tagline":"A simple websocket and angular based application to monitor a raspberry pi (2).","body":"# triberraar-pi-monitor\r\nA simple websocket and angular based application to monitor a raspberry pi (2).\r\n\r\nThe following components are monitored:\r\n\r\n * CPU\r\n * Memory\r\n * Network\r\n * Storage\r\n * Time\r\n \r\n## CPU\r\nThe average load, frequency and temperature are monitored. The average load and temperature are also plotted on a graph.\r\n![CPU](images/cpu.png)\r\n\r\n## Memory\r\nThe total, free and used temperature are monitored and they are also plotted.\r\n![Memory](images/memory.png)\r\n\r\n## Network\r\nThe received and transmitted kilobytes are monitored. The average speed during the last interval is also calculated. These speeds are also plotted.\r\n![Network](images/network.png)\r\n\r\n## Storage\r\nThe total, used, reserved and free kilobytes of the root folder are monitored.\r\n![Storage](images/storage.png)\r\n\r\n## Time\r\nThe current time and uptime of the raspberry pi are monitored.\r\n![Time](images/time.png)\r\n\r\n## Dashboard\r\nThe dashboard is configurable and can contain all the above components. This configuration is saved in local storage.\r\n![Dashboard](images/dashboard.png)\r\n\r\n# Install\r\nPlease make sure node and npm are installed. Also install bower globally.\r\nInstall by running\r\n\r\n    npm install\r\nand\r\n\r\n    bower install\r\n\r\nInstallation done :)\r\n\r\n# Configuration\r\nConfigure the application in the config.json file. For the moment the only configuration is the port used (standard 7076).\r\n\r\n# Run\r\nRun the application by executing\r\n  \r\n    sudo node triberraar-pi-monitor.js\r\n   \r\n!!! Be sure to run as sudo as some functionality needs this !!!\r\n\r\n# Architecture\r\n## Back-end\r\nThe back-end is written in javascript using Node.js. It uses some supporting javascript libraries:\r\n\r\n * express\r\n * socket.io\r\n * async\r\n * lodash\r\n * moment\r\n \r\nThe back-end provides both a JSON Rest-api and websocket communication. If an error occurs the rest api responds with 500 and looks like:\r\n```json\r\n{\r\n    \"message\": \"The error message\",\r\n    \"error\": <the original error object>\r\n}\r\n```\r\nIf an error occurs during the websocket communication a response will look like this:\r\n```json\r\n{\r\n    \"error\": {\r\n        \"message\": \"The error message\",\r\n        \"error\": <the original error object>\r\n    }\r\n}\r\n```\r\n\r\nTemperatures are reported in degrees celcius. Sizes are reported in kilobytes. Frequency is reported in megahertz. Uptime is reported in seconds.\r\n## Front-end\r\nThe front-end is also written in javascript using AngularJS. It uses some supporting javascript libraries:\r\n\r\n * socket.io-client\r\n * angular-socket-io\r\n * angular-ui-router\r\n * moment\r\n * lodash\r\n * angular-chart.js\r\n * angular-bootstrap\r\n * ngstorage\r\n * angular-growl-v2\r\n \r\nLayout is done with Bootstrap and Font Awesome. The used theme is Cosmo.\r\n\r\nThe front-end provides a page per monitored component and history for some. There is also a configurable dashboard, that is saved into local storage.\r\n\r\n# Functionality\r\n## CPU\r\n### Commands\r\nThe cpu frequency is gathered by reading the '/sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_cur_freq' file.\r\n\r\nThe load average is gathered by reading the '/proc/loadavg' file.\r\n\r\nThe temperature is gathered by reading the '/sys/devices/virtual/thermal/thermal_zone0/temp' file.\r\n\r\n### Rest\r\nThe cpu information can be queried on '/cpu' and looks like:\r\n```json\r\n{\r\n    \"loadAvg\":{\r\n        \"1min\":0.4,\r\n        \"5min\":0.47,\r\n        \"15min\":0.45\r\n    },\r\n    \"frequency\":950,\r\n    \"temperature\":48.15\r\n}\r\n```\r\n\r\n### Websocket\r\nThe cpu information can be queried by sending the 'cpu' message and looks like:\r\n```json\r\n{\r\n    \"content\": {\r\n        \"loadAvg\":{\r\n            \"1min\":0.4,\r\n            \"5min\":0.47,\r\n            \"15min\":0.45\r\n        },\r\n        \"frequency\":950,\r\n        \"temperature\":48.15\r\n    }\r\n}\r\n```\r\n\r\n## Memory\r\n### Commands\r\nThe memory information is gathered by reading the '/proc/meminfo' file.\r\n\r\n### Rest\r\nThe memory information can be queried on '/memory' and looks like:\r\n```json\r\n{\r\n    \"total\":447824,\r\n    \"free\":51744,\r\n    \"used\":396080\r\n}\r\n```\r\n\r\n### Websocket\r\nThe memory information can be queried by sending the 'memory' message and looks like:\r\n```json\r\n{\r\n    \"content\": {\r\n        \"total\":447824,\r\n        \"free\":51744,\r\n        \"used\":396080\r\n    }\r\n}\r\n```\r\n\r\n## Network\r\n### Commands\r\nThe network information is gathered by reading the '/sys/class/net/eth0/statistics/rx_bytes' and '/sys/class/net/eth0/statistics/tx_bytes' files.\r\n\r\n### Rest\r\nThe network information can be queried on '/network' and looks like:\r\n```json\r\n{\r\n    \"rx\":518892,\r\n    \"tx\":518891.808\r\n}\r\n```\r\n\r\n### Websocket\r\nThe network information can be queried by sending the 'network' message and looks like:\r\n```json\r\n{\r\n    \"content\": {\r\n        \"rx\":518892,\r\n        \"tx\":518891.808\r\n    }\r\n}\r\n```\r\n\r\n## Storage\r\n### Commands\r\nThe storage information is gathered by executing the 'df' command.\r\n\r\n### Rest\r\nThe storage information can be queried on '/storage' and looks like:\r\n```json\r\n{\r\n    \"total\":29630532,\r\n    \"used\":4710528,\r\n    \"free\":23391788,\r\n    \"reserved\":1528216\r\n}\r\n```\r\n\r\n### Websocket\r\nThe storage information can be queried by sending the 'storage' message and looks like:\r\n```json\r\n{\r\n    \"content\": {\r\n        \"total\":29630532,\r\n        \"used\":4710528,\r\n        \"free\":23391788,\r\n        \"reserved\":1528216\r\n    }\r\n}\r\n```\r\n\r\n## Time\r\n### Commands\r\nThe time information is gathered by reading the '/proc/uptime' file.\r\n\r\n### Rest\r\nThe time information can be queried on '/time' and looks like:\r\n```json\r\n{\r\n    \"uptime\":9524454970,\r\n    \"current\":\"2015-07-29T20:54:57.989Z\"\r\n}\r\n```\r\n\r\n### Websocket\r\nThe time informationis emitted to all connected sockets every second and looks like:\r\n```json\r\n{\r\n    \"content\": {\r\n        \"uptime\":9524454970,\r\n        \"current\":\"2015-07-29T20:54:57.989Z\"\r\n    }\r\n}\r\n```\r\n\r\n# TODO\r\n* Prettier UI","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}